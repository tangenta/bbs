type Query {
    personInfo(id: ID!): PersonInfoResult!
    allMajors: [String!]!
    allSchools: [String!]!
    allCourses: [String!]!
    majorsIn(school: String!): [String!]!

    currentUser: CurrentUserResult!

    allFounds(skip: Long, first: Long): AllFoundsResult!
    foundInfo(id: ID!): FoundInfoResult!
#   searchFounds(object: String!): SearchFoundsResult!
    allLosts(skip: Long, first: Long): AllLostsResult!
    lostInfo(id: ID!): LostInfoResult!
#    searchLosts(object: String!): SearchLostsResult!

    schoolHeatInfo(id: ID!): SchoolHeatInfoResult!
    allSchoolHeats(skip: Long, first: Long, sortedBy: SortedBy): AllSchoolHeatsResult!
    schoolHeatsOfAuthor(authorId: ID!, skip: Long, first: Long): SchoolHeatsOfAuthorResult!

    allLectures(skip: Long, first: Long): AllLecturesResult! # 按讲座时间降序
    lectureInfo(id: ID!): LectureInfoResult!
#   searchLectures(title: String!, skip: Long, first: Long): SearchLecturesResult!
}

type Mutation {
    reset: Boolean!

    editPersonInfo(personInfoInput: PersonInfoInput!): EditPersonInfoResult!
    signup(signup: SignupInput!): SignupResult!
    login(loginInput: LoginInput!): LoginResult!
    logout: LogoutResult!

    confirmPassword(comfirmInput: LoginInput!): ConfirmPasswordResult!
    changePassword(newPassword: String!, resetToken: String!): ChangePasswordResult!

    createFound(foundInput: FoundInput!): CreateFoundResult!
    deleteFound(foundId: ID!): DeleteFoundResult!
    claimFound(foundId: ID!): ClaimFoundResult!
    cancelClaimFound(foundId: ID!): CancelClaimFoundResult!
    createLost(lostInput: LostInput!): CreateLostResult!
    deleteLost(id: ID!): DeleteLostResult!
    claimLost(lostId: ID!): ClaimLostResult!
    cancelClaimLost(foundId: ID!): CancelClaimLostResult!

    createSchoolHeat(schoolHeatInput: SchoolHeatInput!): CreateSchoolHeatResult!
    deleteSchoolHeat(id: ID!): DeleteSchoolHeatResult!

    createLecture(lectureInput: LectureInput!): CreateLectureResult!
    editLecture(id: ID!, lectureInput: LectureOptionalInput!): EditLectureResult!
    deleteLecture(id: ID!): DeleteLectureResult!
}

schema {
    query: Query
    mutation: Mutation
}

enum SortedBy {
    ActiveTimeAsc
    ActiveTimeDes
    HeatAsc
    HeatDes
    NatureAsc
    NatureDes
}